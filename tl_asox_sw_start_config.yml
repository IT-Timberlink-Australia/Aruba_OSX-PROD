---
- name: Initialize and gather required facts
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Compute current time with +10 offset (no external collections)
      set_fact:
        DTG_local: >-
          {{ (lookup('pipe', 'date -u -d "+10 hours" "+%d_%m_%Y_%H%M"')) }}

- name: Check VRF Ping TFTP Server
  hosts: all
  gather_facts: false
  collections:
    - arubanetworks.aoscx
  vars:
    ansible_connection: network_cli
    ansible_network_os: arubanetworks.aoscx.aoscx
  tasks:
    - name: Ping TFTP server via default VRF
      aoscx_command:
        commands: "ping {{ tftp_server }} repetitions {{ ping_repetitions }} vrf default"
      register: ping_default
      ignore_errors: yes
      changed_when: false

    - name: Ping TFTP server via mgmt VRF
      aoscx_command:
        commands: "ping {{ tftp_server }} repetitions {{ ping_repetitions }} vrf mgmt"
      register: ping_mgmt
      ignore_errors: yes
      changed_when: false
      when: >-
        ping_default is failed or 
        ('100% packet loss' in ping_default.stdout[0]|default('') or
         'Network is unreachable' in ping_default.stdout[0]|default('') or
         'ping4: connect' in ping_default.stderr|default(''))

    - name: Determine which VRF to use
      set_fact:
        target_vrf: >-
          {% if ping_default is success and 'bytes from' in ping_default.stdout[0]|default('') %}
            default
          {% elif ping_mgmt is success and 'bytes from' in ping_mgmt.stdout[0]|default('') %}
            mgmt
          {% else %}
            default
          {% endif %}

- name: Backup startup config
  hosts: all
  gather_facts: false
  collections:
    - arubanetworks.aoscx
  vars:
    ansible_connection: arubanetworks.aoscx.aoscx
    ansible_network_os: arubanetworks.aoscx.aoscx
  tasks:
    - name: Create backup filename
      set_fact:
        backup_filename: "{{ inventory_hostname }}_{{ hostvars['localhost']['DTG_local'] }}_startconfig.cli"

    - name: Backup startup config
      aoscx_backup_config:
        config_name: 'startup-config'
        remote_output_file_tftp_path: 'tftp://{{ tftp_server }}/{{ tftp_directory }}/{{ backup_filename }}'
        config_type: 'cli'
        vrf: "{{ target_vrf | trim }}"
      register: backup_result
      retries: 3
      delay: 10
      until: backup_result is succeeded
      ignore_errors: yes
      changed_when: "backup_result is succeeded"

    - name: Register backup result as host fact
      set_fact:
        backup_result: "{{ backup_result }}"

- name: Aggregate backup results
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Collect all backup results into master fact
      set_fact:
        backup_results: "{{ backup_results | default({}) | combine({ item: (hostvars[item] | default({})).get('backup_result', 'No result') }) }}"
      loop: "{{ groups['all'] }}"

- name: Send backup result notification email
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Send email with backup results
      community.general.mail:
        host: smtp.timberlinkaustralia.com.au
        port: 25
        from: awx@timberlinkaustralia.com.au
        to: "{{ email_recipients }}"
        subject: "TL Switch Backup Results - Startup Config"
        subtype: html
        body: |
          <html>
          <body>
            <p><strong>Job:</strong> {{ awx_job_name | default('Unknown Job') }}<br>
            <strong>Job ID:</strong> {{ tower_job_id | default('N/A') }}<br>
            <strong>Job Status:</strong> ✅ Completed<br><br>

            <strong>TFTP Server:</strong> {{ tftp_server_name | default('Not Set') }}<br>
            <strong>TFTP Directory:</strong> {{ tftp_directory | default('/default/path') }}<br>
            <strong>Date:</strong> {{ DTG_local | default('Unknown Date') }}</p>

            <hr>

            <h3>Bell Bay</h3>
            {% set bell_success = 0 %}
            {% set bell_fail = 0 %}
            {% set found = false %}
            {% for host, result in backup_results.items() if host.startswith('BEL') %}
              {% set found = true %}
              <p><strong>{{ host }}:</strong><br>
              {% if result is succeeded or (result.failed == false) %}
                ✅ Successful — Attempts: {{ result.attempts | default('N/A') }}
                {% set bell_success = bell_success + 1 %}
              {% else %}
                ❌ Failed<br><pre>{{ result | to_nice_json }}</pre>
                {% set bell_fail = bell_fail + 1 %}
              {% endif %}
              </p>
            {% endfor %}
            {% if not found %}
              <p>No Bell Bay switches in backup results.</p>
            {% else %}
              <p><strong>✅ Successes:</strong> {{ bell_success }}<br>
              <strong>❌ Failures:</strong> {{ bell_fail }}</p>
            {% endif %}

            <hr>

            <h3>Tarpeena</h3>
            {% set tarp_success = 0 %}
            {% set tarp_fail = 0 %}
            {% set found = false %}
            {% for host, result in backup_results.items() if host.startswith('TAR') %}
              {% set found = true %}
              <p><strong>{{ host }}:</strong><br>
              {% if result is succeeded or (result.failed == false) %}
                ✅ Successful — Attempts: {{ result.attempts | default('N/A') }}
                {% set tarp_success = tarp_success + 1 %}
              {% else %}
                ❌ Failed<br><pre>{{ result | to_nice_json }}</pre>
                {% set tarp_fail = tarp_fail + 1 %}
              {% endif %}
              </p>
            {% endfor %}
            {% if not found %}
              <p>No Tarpeena switches in backup results.</p>
            {% else %}
              <p><strong>✅ Successes:</strong> {{ tarp_success }}<br>
              <strong>❌ Failures:</strong> {{ tarp_fail }}</p>
            {% endif %}

            <hr>

            <h3>Other Sites</h3>
            {% set other_success = 0 %}
            {% set other_fail = 0 %}
            {% set found = false %}
            {% for host, result in backup_results.items() if not host.startswith('BEL') and not host.startswith('TAR') %}
              {% set found = true %}
              <p><strong>{{ host }}:</strong><br>
              {% if result is succeeded or (result.failed == false) %}
                ✅ Successful — Attempts: {{ result.attempts | default('N/A') }}
                {% set other_success = other_success + 1 %}
              {% else %}
                ❌ Failed<br><pre>{{ result | to_nice_json }}</pre>
                {% set other_fail = other_fail + 1 %}
              {% endif %}
              </p>
            {% endfor %}
            {% if not found %}
              <p>No other site switches in backup results.</p>
            {% else %}
              <p><strong>✅ Successes:</strong> {{ other_success }}<br>
              <strong>❌ Failures:</strong> {{ other_fail }}</p>
            {% endif %}
          </body>
          </html>
