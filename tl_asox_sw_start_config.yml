---
- name: Initialize and gather required facts
  hosts: localhost
  tasks:
    - name: Get ansible date/time facts
      setup:
        filter: "ansible_date_time"
        gather_subset: "!all"

    - name: Store DTG as fact
      set_fact:
        DTG: "{{ ansible_date_time.date }}"

- name: Check VRF Ping TFTP Server
  hosts: all
  gather_facts: false
  collections:
    - arubanetworks.aoscx
  vars:
    ansible_connection: network_cli
    ansible_network_os: arubanetworks.aoscx.aoscx
  tasks:
    - name: Ping TFTP server via default VRF
      aoscx_command:
        commands: "ping {{ tftp_server }} repetitions {{ ping_repetitions }} vrf default"
      register: ping_default
      ignore_errors: yes
      changed_when: false

    - name: Ping TFTP server via mgmt VRF
      aoscx_command:
        commands: "ping {{ tftp_server }} repetitions {{ ping_repetitions }} vrf mgmt"
      register: ping_mgmt
      ignore_errors: yes
      changed_when: false
      when: >-
        ping_default is failed or 
        ('100% packet loss' in ping_default.stdout[0]|default('') or
         'Network is unreachable' in ping_default.stdout[0]|default('') or
         'ping4: connect' in ping_default.stderr|default(''))

    - name: Determine which VRF to use
      set_fact:
        target_vrf: >-
          {% if ping_default is success and 'bytes from' in ping_default.stdout[0]|default('') %}
            default
          {% elif ping_mgmt is success and 'bytes from' in ping_mgmt.stdout[0]|default('') %}
            mgmt
          {% else %}
            default
          {% endif %}

- name: Backup startup config
  hosts: all
  gather_facts: false
  collections:
    - arubanetworks.aoscx
  vars:
    ansible_connection: arubanetworks.aoscx.aoscx
    ansible_network_os: arubanetworks.aoscx.aoscx
  tasks:
    - name: Create backup filename
      set_fact:
        backup_filename: "{{ inventory_hostname }}_{{ hostvars['localhost']['DTG'] }}_startconfig.cli"

    - name: Backup startup config
      aoscx_backup_config:
        config_name: 'startup-config'
        remote_output_file_tftp_path: 'tftp://{{ tftp_server }}/{{ tftp_directory }}/{{ backup_filename }}'
        config_type: 'cli'
        vrf: "{{ target_vrf | trim }}"
      register: backup_result
      retries: 3
      delay: 10
      until: backup_result is succeeded
      ignore_errors: yes
      changed_when: "backup_result is succeeded"

    - name: Register backup result as host fact
      set_fact:
        backup_result: "{{ backup_result }}"

- name: Aggregate backup results
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Collect all backup results into master fact
      set_fact:
        backup_results: "{{ backup_results | default({}) | combine({ item: (hostvars[item] | default({})).get('backup_result', 'No result') }) }}"
      loop: "{{ groups['all'] }}"

- name: Send backup result notification email
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Send email with backup results
      community.general.mail:
        host: smtp.timberlinkaustralia.com.au
        port: 25
        from: awx@timberlinkaustralia.com.au
        to: "{{ email_recipients }}"
        subject: "TL Switch Backup Results - Startup Config"
        body: |

          Job: {{ TOWER_JOB_TEMPLATE_NAME }}
          Job ID: {{ job.id | default('N/A') }}

          ==========================================================

          Bell Bay:
          {% for host, result in backup_results.items() if host.startswith('BEL') %}
            {{ host }}: 
            {% if result is succeeded or (result.failed == False) %}
                ✅ Successful - Attempts: {{ result.attempts | default('N/A') }}
            {% else %}
                ❌ Failed - {{ result | to_nice_json }}
            {% endif %}
          {% else %}
            No Bell Bay switches in backup results
          {% endfor %}
          
          ==========================================================

          Tarpeena:
          {% for host, result in backup_results.items() if host.startswith('TAR') %}
            {{ host }}: 
            {% if result is succeeded or (result.failed == False) %}
                ✅ Successful - Attempts: {{ result.attempts | default('N/A') }}
            {% else %}
                ❌ Failed - {{ result | to_nice_json }}
            {% endif %}
          {% else %}
            No Tarpeena switches in backup results
          {% endfor %}
          
          ==========================================================
          
          Other Sites:
          {% for host, result in backup_results.items() if not host.startswith('BEL') and not host.startswith('TAR') %}
            {{ host }}: 
            {% if result is succeeded or (result.failed == False) %}
                ✅ Successful - Attempts: {{ result.attempts | default('N/A') }}
            {% else %}
                ❌ Failed - {{ result | to_nice_json }}
            {% endif %}
          {% else %}
            No other site switches in backup results
          {% endfor %}
        subtype: plain
    - name: Debug backup results
      debug:
        var: backup_results