---
- name: Initialize and gather required facts
  hosts: localhost
  tasks:
    - name: Get ansible date/time facts
      setup:
        filter: "ansible_date_time"
        gather_subset: "!all"
    
    - name: Store DTG as fact
      set_fact:
        DTG: "{{ ansible_date_time.date }}"

- name: Check VRF Ping TFTP Server
  hosts: BEL-01SWI0103
  gather_facts: false
  collections:
    - arubanetworks.aoscx
  vars:
    ansible_connection: network_cli
    ansible_network_os: arubanetworks.aoscx.aoscx
  tasks:
    # ... (your existing VRF ping tasks) ...

- name: Backup running config
  hosts: BEL-01SWI0103
  gather_facts: false
  collections:
    - arubanetworks.aoscx
  vars:
    ansible_connection: arubanetworks.aoscx.aoscx
    ansible_network_os: arubanetworks.aoscx.aoscx
  tasks:
    - name: Create backup filename
      set_fact:
        backup_filename: "{{ inventory_hostname }}_{{ hostvars['localhost']['DTG'] }}_runconfig.cli"

    - name: Backup running config
      aoscx_backup_config:
        config_name: 'running-config'
        remote_output_file_tftp_path: 'tftp://{{ tftp_server }}/{{ tftp_directory|default("running_config") }}/{{ backup_filename }}'
        config_type: 'cli'
        vrf: "{{ target_vrf | trim }}"
      register: backup_result
      retries: 3
      delay: 10
      until: backup_result is succeeded
      ignore_errors: yes

    - name: Set host backup status
      set_fact:
        host_backup_success: "{{ backup_result is succeeded }}"
      # This makes the fact available for aggregation
      run_once: true
      delegate_to: localhost

- name: Aggregate results for notifications
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Compile backup results
      set_fact:
        backup_status: >-
          {% set ns = namespace(results={}) %}
          {% for host in ansible_play_hosts_all %}
          {% if hostvars[host].host_backup_success is defined %}
          {% set _ = ns.results.update({host: hostvars[host].host_backup_success}) %}
          {% endif %}
          {% endfor %}
          {{ ns.results }}
      run_once: true

    - name: Show final backup status
      debug:
        var: backup_status