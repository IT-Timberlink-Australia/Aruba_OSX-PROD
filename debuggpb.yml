---
- name: Initialize and gather required facts
  hosts: localhost
  tasks:
    - name: Get ansible date/time facts
      setup:
        filter: "ansible_date_time"
        gather_subset: "!all"
      tags: always
    
    - name: Store DTG as fact
      set_fact:
        DTG: "{{ ansible_date_time.date }}"
      tags: always

- name: Check VRF Ping TFTP Server
  hosts: BEL-01SWI0103
  gather_facts: false
  collections:
    - arubanetworks.aoscx
  vars:
    ansible_connection: network_cli
    ansible_network_os: arubanetworks.aoscx.aoscx
  tasks:
    - name: Ping TFTP server via default VRF
      aoscx_command:
        commands: "ping {{ tftp_server }} repetitions {{ ping_repetitions|default(2) }} vrf default"
      register: ping_default
      ignore_errors: yes
      changed_when: false

    - name: Ping TFTP server via mgmt VRF
      aoscx_command:
        commands: "ping {{ hostvars['localhost']['tftp_server'] }} repetitions {{ hostvars['localhost']['ping_repetitions'] }} vrf mgmt"
      register: ping_mgmt
      ignore_errors: yes
      changed_when: false
      when: >-
        ping_default is failed or 
        ('100% packet loss' in ping_default.stdout[0]|default('') or
         'Network is unreachable' in ping_default.stdout[0]|default('') or
         'ping4: connect' in ping_default.stderr|default(''))

    - name: Determine which VRF to use
      set_fact:
        target_vrf: >-
          {% if ping_default is success and 'bytes from' in ping_default.stdout[0]|default('') %}
            default
          {% elif ping_mgmt is success and 'bytes from' in ping_mgmt.stdout[0]|default('') %}
            mgmt
          {% else %}
            default
          {% endif %}

    - name: Validate TFTP server reachability
      fail:
        msg: "Cannot reach TFTP server {{ hostvars['localhost']['tftp_server'] }} via either default or mgmt VRF"
      when: >-
        (ping_default is failed or 'bytes from' not in ping_default.stdout[0]|default('')) and
        (ping_mgmt is failed or 'bytes from' not in ping_mgmt.stdout[0]|default(''))

- name: Backup running config
  hosts: BEL-01SWI0103
  gather_facts: false
  collections:
    - arubanetworks.aoscx
  vars:
    ansible_connection: arubanetworks.aoscx.aoscx
    ansible_network_os: arubanetworks.aoscx.aoscx
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Create backup filename
      set_fact:
        backup_filename: "{{ inventory_hostname }}_{{ hostvars['localhost']['DTG'] }}_runconfig.cli"
    
    - name: Backup running config
      aoscx_backup_config:
        config_name: 'running-config'
        remote_output_file_tftp_path: 'tftp://{{ hostvars["localhost"]["tftp_server"] }}/{{ hostvars["localhost"]["tftp_directory"] }}/{{ backup_filename }}'
        config_type: 'cli'
        vrf: "{{ target_vrf | trim }}"
      register: backup_result
      retries: 3
      delay: 10
      until: backup_result is succeeded
      ignore_errors: yes

    - name: Validate backup completion
      fail:
        msg: "Failed to backup configuration after 3 attempts"
      when: backup_result is failed

    - name: Confirm backup success
      debug:
        msg: "Successfully backed up config to tftp://{{ tftp_server }}/{{ tftp_directory|default('running_config') }}/{{ backup_filename }}"
      when: backup_result is succeeded